// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Models.Context;

namespace api.Migrations
{
    [DbContext(typeof(Postgre))]
    [Migration("20210303204749_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("api.Models.Brother", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("idPerson")
                        .HasColumnType("bigint");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<long?>("personid")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.HasIndex("personid");

                    b.ToTable("Brother");
                });

            modelBuilder.Entity("api.Models.Gender", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("api.Models.Group", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("groupTypeid")
                        .HasColumnType("bigint");

                    b.Property<long>("idGroupType")
                        .HasColumnType("bigint");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("groupTypeid");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.ToTable("Group");
                });

            modelBuilder.Entity("api.Models.GroupType", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.ToTable("GroupType");
                });

            modelBuilder.Entity("api.Models.Group_Person", b =>
                {
                    b.Property<long>("idGroup")
                        .HasColumnType("bigint");

                    b.Property<long>("idPerson")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("idGroup", "idPerson");

                    b.HasIndex("idPerson");

                    b.ToTable("Group_Person");
                });

            modelBuilder.Entity("api.Models.Month", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<short>("month")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("year")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.ToTable("Month");
                });

            modelBuilder.Entity("api.Models.Person", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("birth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("genderid")
                        .HasColumnType("bigint");

                    b.Property<long>("idGender")
                        .HasColumnType("bigint");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("name2")
                        .HasColumnType("text");

                    b.Property<string>("surname")
                        .HasColumnType("text");

                    b.Property<string>("surname2")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("genderid");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.ToTable("Person");
                });

            modelBuilder.Entity("api.Models.Report", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("brotherid")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("idBrother")
                        .HasColumnType("bigint");

                    b.Property<long>("idMonth")
                        .HasColumnType("bigint");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<long?>("monthid")
                        .HasColumnType("bigint");

                    b.Property<short>("placements")
                        .HasColumnType("smallint");

                    b.Property<short>("studies")
                        .HasColumnType("smallint");

                    b.Property<long>("time")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("videos")
                        .HasColumnType("smallint");

                    b.Property<short>("visits")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.HasIndex("brotherid");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.HasIndex("monthid");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<long>("idPerson")
                        .HasColumnType("bigint");

                    b.Property<Guid>("identifier")
                        .HasColumnType("uuid");

                    b.Property<string>("pass")
                        .HasColumnType("text");

                    b.Property<long?>("personid")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("identifier")
                        .IsUnique();

                    b.HasIndex("personid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("api.Models.User_Role", b =>
                {
                    b.Property<long>("idRole")
                        .HasColumnType("bigint");

                    b.Property<long>("idUser")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("idRole", "idUser");

                    b.HasIndex("idUser");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("api.Models.Brother", b =>
                {
                    b.HasOne("api.Models.Person", "person")
                        .WithMany()
                        .HasForeignKey("personid");

                    b.Navigation("person");
                });

            modelBuilder.Entity("api.Models.Group", b =>
                {
                    b.HasOne("api.Models.GroupType", "groupType")
                        .WithMany()
                        .HasForeignKey("groupTypeid");

                    b.Navigation("groupType");
                });

            modelBuilder.Entity("api.Models.Group_Person", b =>
                {
                    b.HasOne("api.Models.Group", "group")
                        .WithMany("group_persons")
                        .HasForeignKey("idGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Person", "person")
                        .WithMany("group_persons")
                        .HasForeignKey("idPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("person");
                });

            modelBuilder.Entity("api.Models.Person", b =>
                {
                    b.HasOne("api.Models.Gender", "gender")
                        .WithMany()
                        .HasForeignKey("genderid");

                    b.Navigation("gender");
                });

            modelBuilder.Entity("api.Models.Report", b =>
                {
                    b.HasOne("api.Models.Brother", "brother")
                        .WithMany()
                        .HasForeignKey("brotherid");

                    b.HasOne("api.Models.Month", "month")
                        .WithMany()
                        .HasForeignKey("monthid");

                    b.Navigation("brother");

                    b.Navigation("month");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.HasOne("api.Models.Person", "person")
                        .WithMany()
                        .HasForeignKey("personid");

                    b.Navigation("person");
                });

            modelBuilder.Entity("api.Models.User_Role", b =>
                {
                    b.HasOne("api.Models.Role", "role")
                        .WithMany("user_roles")
                        .HasForeignKey("idRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "user")
                        .WithMany("user_roles")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("role");

                    b.Navigation("user");
                });

            modelBuilder.Entity("api.Models.Group", b =>
                {
                    b.Navigation("group_persons");
                });

            modelBuilder.Entity("api.Models.Person", b =>
                {
                    b.Navigation("group_persons");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Navigation("user_roles");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("user_roles");
                });
#pragma warning restore 612, 618
        }
    }
}
